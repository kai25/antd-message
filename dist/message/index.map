{"version":3,"sources":["message/index.js"],"names":["_react","require","_propTypes","_reactDom","_classnames","_icon","GlobalMessage","props","type","content","cls","_classnames2","default","_react2","createElement","className","_icon2","propTypes","PropTypes","string","isRequired","oneOfType","node","message","success","timeout","this","warn","show","arguments","length","undefined","container","setAttribute","document","body","appendChild","unmountComponentAtNode","parentNode","removeChild"],"mappings":"kKAAA,IAAAA,QAAAC,QAAA,gDACAC,WAAAD,QAAA,6DACAE,UAAAF,QAAA,aACAG,YAAAH,QAAA,+DAEAI,MAAAJ,QAAA,+CALAA,SAAA,eASA,IAAMK,eAAgB,SAACC,GAAU,GACvBC,GAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QAThBC,GAAA,EAAAC,aAAAC,SAWI,kBACAJ,EAXJ,OAcIK,SAAAD,QAAAE,cAAA,OAAKC,UAAWL,GAbpBG,QAAAD,QAAAE,cAAAE,OAAAJ,SAAAJ,KAAAA,IAeMK,QAAAD,QAAAE,cAAA,IAAA,KAAIL,IAKVH,eAAcW,WACZT,KAAMU,YAAAA,QAAUC,OAAOC,WAjBzBX,QAAAS,YAAAA,QAAAG,WAmBIH,YAAAA,QAAUC,OACVD,YAAAA,QAAUI,OACTF,WAIE,IAAMG,SAAAA,QAAAA,SArBXC,QAqBqB,SArBfd,EAAMe,GAIZC,KACEH,QAAA,UAAAd,EAAAgB,IACEE,KAeiB,SAfjBlB,EAAAgB,GACAC,KAAAH,QAAA,OAAAd,EAAAgB,IAAIhB,MAca,SAdbA,EAAAA,GAAJiB,KAAAH,QAAA,QAAAd,EAAAgB,IA2BJG,KAbqB,SAahBpB,EAAMC,GAAyB,GAAhBgB,GAAgBI,UAAAC,OAAA,OAAAC,KAAAF,UAAA,GAAAA,UAAA,GAAN,IAtBhCvB,EAAcW,SAAYH,cAAA,MACxBN,GAAMU,aAAAA,QAAiBE,0BACvBX,EAASS,aAAAA,QAATT,+BACYU,EADZV,MAFFuB,EAAAC,aAAA,QAAA,uBAAAR,EAAA,MA2BIS,SAASC,KAAKC,YAAYJ,IAlBjBT,EAAAA,UAAAA,QAAAA,QAAAA,QAAAA,cAAAA,eAAAA,KAAUf,EAAAC,QAAAA,IAAAuB,GACrBR,WADqB,YAEnB,EAAArB,UAAAkC,wBAAwB5B,GAFLuB,EAAAM,WAAAC,YAAAP,IAAAP","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { render, unmountComponentAtNode } from 'react-dom';\nimport cx from 'classnames';\n\nimport Icon from '../icon';\n\nimport './style.less';\n\nconst GlobalMessage = (props) => {\n  const { type, content } = props;\n  const cls = cx(\n    'message-content',\n    type\n  );\n  return (\n    <div className={cls}>\n      <Icon type={type} />\n      <p>{content}</p>\n    </div>\n  );\n};\n\nGlobalMessage.propTypes = {\n  type: PropTypes.string.isRequired,\n  content: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.node,\n  ]).isRequired,\n};\n\n\nexport const message = {\n  success(content, timeout) {\n    this.message('success', content, timeout);\n  },\n\n  warn(content, timeout) {\n    this.message('warn', content, timeout);\n  },\n\n  error(content, timeout) {\n    this.message('error', content, timeout);\n  },\n\n  show(type, content, timeout = 3000) {\n    const container = document.createElement('div');\n    container.setAttribute('class', 'component-message-wrap');\n    container.setAttribute('style', `-webkit-animation-duration: ${timeout}ms`);\n    container.setAttribute('style', `animation-duration: ${timeout}ms`);\n    document.body.appendChild(container);\n    render(<GlobalMessage type={type} content={content} />, container);\n    setTimeout(() => {\n      unmountComponentAtNode(container);\n      container.parentNode.removeChild(container);\n    }, timeout);\n  }\n}\n"]}