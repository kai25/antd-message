{"version":3,"sources":["message/index.js"],"names":["_react","require","_propTypes","_reactDom","_classnames","_icon","GlobalMessage","props","type","content","cls","_classnames2","default","_react2","createElement","className","_icon2","propTypes","PropTypes","string","isRequired","Message","timeout","this","message","arguments","length","undefined","container","document","setAttribute","body","render","setTimeout","unmountComponentAtNode","parentNode","removeChild"],"mappings":"0XAAAA,OAAAC,QAAA,gDACAC,WAAAD,QAAA,6DACAE,UAAAF,QAAA,aACAG,YAAAH,QAAA,+DAEAI,MAAAJ,QAAA,+CAEAA,SAAA,eAEA,IAAMK,eAAgB,SAACC,GAAU,GACvBC,GAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QACRC,GAAM,EAAAC,aAAAC,SACV,kBACAJ,EAEF,OACEK,SAAAD,QAAAE,cAAA,OAAKC,UAAWL,GACdG,QAAAD,QAAAE,cAACE,OAAAJ,SAAKJ,KAAMA,IAhBlBK,QAAAD,QAAAE,cAAA,IAAA,KAAAL,IAsBAH,eAAcW,WApBdT,KAAAU,YAAAA,QAAAC,OAAAC,WAsBEX,QAASS,YAAAA,QAAUC,OAAOC,eApB5BC,4IAwBiBZ,EAASa,GACtBC,KAAKC,QAAQ,UAAWf,EAASa,gCAvBrCb,EAAAa,GA0BIC,KAAKC,QAAQ,OAAQf,EAASa,iCAEnBb,EAASa,GA1BlBhB,KAAAA,QAAAA,QAAgBG,EAAhBH,mCACsBC,EAAZE,GADiB,GAAAa,GAAAG,UAAAC,OAAA,OAAAC,KAAAF,UAAA,GAAAA,UAAA,GAAA,IA8BvBG,EAAYC,SAASf,cAAc,MA5B3Cc,GAAYE,aAAA,QAAA,0BAIZF,EACEE,aAAA,QADF,+BACER,EADF,MACEM,EAAAE,aAAA,QAAA,uBAAAR,EAAA,MAAAO,SAAKE,KAAWrB,YAAhBkB,IACE,EAAAzB,UAAA6B,QAAAnB,QAAAD,QAAAE,cAAAR,eAAAE,KAAAA,EAACC,QAAAA,IAAWD,GACZyB,WAAA,YAAA,EAAA9B,UAAA+B,wBAAAN,GAAAA,EAAAO,WAAAC,YAAAR,IAAInB,4BAbVY","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { render, unmountComponentAtNode } from 'react-dom';\nimport cx from 'classnames';\n\nimport Icon from '../icon';\n\nimport './style.less';\n\nconst GlobalMessage = (props) => {\n  const { type, content } = props;\n  const cls = cx(\n    'message-content',\n    type\n  );\n  return (\n    <div className={cls}>\n      <Icon type={type} />\n      <p>{content}</p>\n    </div>\n  );\n};\n\nGlobalMessage.propTypes = {\n  type: PropTypes.string.isRequired,\n  content: PropTypes.string.isRequired\n};\n\nexport default class Message {\n  static success(content, timeout) {\n    this.message('success', content, timeout);\n  }\n  static warn(content, timeout) {\n    this.message('warn', content, timeout);\n  }\n  static error(content, timeout) {\n    this.message('error', content, timeout);\n  }\n  static message(type, content, timeout = 3000) {\n    const container = document.createElement('div');\n    container.setAttribute('class', 'component-message-wrap');\n    container.setAttribute('style', `-webkit-animation-duration: ${timeout}ms`);\n    container.setAttribute('style', `animation-duration: ${timeout}ms`);\n    document.body.appendChild(container);\n    render(<GlobalMessage type={type} content={content} />, container);\n    setTimeout(() => {\n      unmountComponentAtNode(container);\n      container.parentNode.removeChild(container);\n    }, timeout);\n  }\n}\n"]}